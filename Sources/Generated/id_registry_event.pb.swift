// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: id_registry_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum IdRegistryEventType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case register // = 1
  case transfer // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .register
    case 2: self = .transfer
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .register: return 1
    case .transfer: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension IdRegistryEventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [IdRegistryEventType] = [
    .none,
    .register,
    .transfer,
  ]
}

#endif  // swift(>=4.2)

public struct IdRegistryEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockNumber: UInt32 = 0

  public var blockHash: Data = Data()

  public var transactionHash: Data = Data()

  public var logIndex: UInt32 = 0

  public var fid: UInt64 = 0

  public var to: Data = Data()

  public var type: IdRegistryEventType = .none

  public var from: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension IdRegistryEventType: @unchecked Sendable {}
extension IdRegistryEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IdRegistryEventType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ID_REGISTRY_EVENT_TYPE_NONE"),
    1: .same(proto: "ID_REGISTRY_EVENT_TYPE_REGISTER"),
    2: .same(proto: "ID_REGISTRY_EVENT_TYPE_TRANSFER"),
  ]
}

extension IdRegistryEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "IdRegistryEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_number"),
    2: .standard(proto: "block_hash"),
    3: .standard(proto: "transaction_hash"),
    4: .standard(proto: "log_index"),
    5: .same(proto: "fid"),
    6: .same(proto: "to"),
    7: .same(proto: "type"),
    8: .same(proto: "from"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.blockNumber) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.blockHash) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.transactionHash) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.logIndex) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.fid) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.to) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.blockNumber, fieldNumber: 1)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockHash, fieldNumber: 2)
    }
    if !self.transactionHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.transactionHash, fieldNumber: 3)
    }
    if self.logIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.logIndex, fieldNumber: 4)
    }
    if self.fid != 0 {
      try visitor.visitSingularUInt64Field(value: self.fid, fieldNumber: 5)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularBytesField(value: self.to, fieldNumber: 6)
    }
    if self.type != .none {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 7)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IdRegistryEvent, rhs: IdRegistryEvent) -> Bool {
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.transactionHash != rhs.transactionHash {return false}
    if lhs.logIndex != rhs.logIndex {return false}
    if lhs.fid != rhs.fid {return false}
    if lhs.to != rhs.to {return false}
    if lhs.type != rhs.type {return false}
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
