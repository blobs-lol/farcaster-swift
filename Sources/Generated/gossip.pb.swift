// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gossip.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum GossipVersion: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case v1 // = 0
  case v11 // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .v1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .v1
    case 1: self = .v11
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .v1: return 0
    case .v11: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GossipVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GossipVersion] = [
    .v1,
    .v11,
  ]
}

#endif  // swift(>=4.2)

struct GossipAddressInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var family: UInt32 = 0

  var port: UInt32 = 0

  var dnsName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ContactInfoContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gossipAddress: GossipAddressInfo {
    get {return _gossipAddress ?? GossipAddressInfo()}
    set {_gossipAddress = newValue}
  }
  /// Returns true if `gossipAddress` has been explicitly set.
  var hasGossipAddress: Bool {return self._gossipAddress != nil}
  /// Clears the value of `gossipAddress`. Subsequent reads from it will return its default value.
  mutating func clearGossipAddress() {self._gossipAddress = nil}

  var rpcAddress: GossipAddressInfo {
    get {return _rpcAddress ?? GossipAddressInfo()}
    set {_rpcAddress = newValue}
  }
  /// Returns true if `rpcAddress` has been explicitly set.
  var hasRpcAddress: Bool {return self._rpcAddress != nil}
  /// Clears the value of `rpcAddress`. Subsequent reads from it will return its default value.
  mutating func clearRpcAddress() {self._rpcAddress = nil}

  var excludedHashes: [String] = []

  var count: UInt32 = 0

  var hubVersion: String = String()

  var network: FarcasterNetwork = .none

  var appVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _gossipAddress: GossipAddressInfo? = nil
  fileprivate var _rpcAddress: GossipAddressInfo? = nil
}

struct GossipMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var content: OneOf_Content? {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  var message: Message {
    get {
      if case .message(let v)? = _storage._content {return v}
      return Message()
    }
    set {_uniqueStorage()._content = .message(newValue)}
  }

  var idRegistryEvent: IdRegistryEvent {
    get {
      if case .idRegistryEvent(let v)? = _storage._content {return v}
      return IdRegistryEvent()
    }
    set {_uniqueStorage()._content = .idRegistryEvent(newValue)}
  }

  var contactInfoContent: ContactInfoContent {
    get {
      if case .contactInfoContent(let v)? = _storage._content {return v}
      return ContactInfoContent()
    }
    set {_uniqueStorage()._content = .contactInfoContent(newValue)}
  }

  var topics: [String] {
    get {return _storage._topics}
    set {_uniqueStorage()._topics = newValue}
  }

  var peerID: Data {
    get {return _storage._peerID}
    set {_uniqueStorage()._peerID = newValue}
  }

  var version: GossipVersion {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Content: Equatable {
    case message(Message)
    case idRegistryEvent(IdRegistryEvent)
    case contactInfoContent(ContactInfoContent)

  #if !swift(>=4.1)
    static func ==(lhs: GossipMessage.OneOf_Content, rhs: GossipMessage.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.message, .message): return {
        guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.idRegistryEvent, .idRegistryEvent): return {
        guard case .idRegistryEvent(let l) = lhs, case .idRegistryEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactInfoContent, .contactInfoContent): return {
        guard case .contactInfoContent(let l) = lhs, case .contactInfoContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GossipVersion: @unchecked Sendable {}
extension GossipAddressInfo: @unchecked Sendable {}
extension ContactInfoContent: @unchecked Sendable {}
extension GossipMessage: @unchecked Sendable {}
extension GossipMessage.OneOf_Content: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GossipVersion: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GOSSIP_VERSION_V1"),
    1: .same(proto: "GOSSIP_VERSION_V1_1"),
  ]
}

extension GossipAddressInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GossipAddressInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "family"),
    3: .same(proto: "port"),
    4: .standard(proto: "dns_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.family) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.port) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dnsName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if self.family != 0 {
      try visitor.visitSingularUInt32Field(value: self.family, fieldNumber: 2)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 3)
    }
    if !self.dnsName.isEmpty {
      try visitor.visitSingularStringField(value: self.dnsName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GossipAddressInfo, rhs: GossipAddressInfo) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.family != rhs.family {return false}
    if lhs.port != rhs.port {return false}
    if lhs.dnsName != rhs.dnsName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ContactInfoContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ContactInfoContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gossip_address"),
    2: .standard(proto: "rpc_address"),
    3: .standard(proto: "excluded_hashes"),
    4: .same(proto: "count"),
    5: .standard(proto: "hub_version"),
    6: .same(proto: "network"),
    7: .standard(proto: "app_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gossipAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rpcAddress) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.excludedHashes) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.count) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.hubVersion) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.network) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gossipAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rpcAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.excludedHashes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.excludedHashes, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 4)
    }
    if !self.hubVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hubVersion, fieldNumber: 5)
    }
    if self.network != .none {
      try visitor.visitSingularEnumField(value: self.network, fieldNumber: 6)
    }
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ContactInfoContent, rhs: ContactInfoContent) -> Bool {
    if lhs._gossipAddress != rhs._gossipAddress {return false}
    if lhs._rpcAddress != rhs._rpcAddress {return false}
    if lhs.excludedHashes != rhs.excludedHashes {return false}
    if lhs.count != rhs.count {return false}
    if lhs.hubVersion != rhs.hubVersion {return false}
    if lhs.network != rhs.network {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GossipMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GossipMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .standard(proto: "id_registry_event"),
    3: .standard(proto: "contact_info_content"),
    4: .same(proto: "topics"),
    5: .standard(proto: "peer_id"),
    6: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _content: GossipMessage.OneOf_Content?
    var _topics: [String] = []
    var _peerID: Data = Data()
    var _version: GossipVersion = .v1

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _content = source._content
      _topics = source._topics
      _peerID = source._peerID
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          var v: Message?
          var hadOneofValue = false
          if let current = _storage._content {
            hadOneofValue = true
            if case .message(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._content = .message(v)
          }
        }()
        case 2: try {
          var v: IdRegistryEvent?
          var hadOneofValue = false
          if let current = _storage._content {
            hadOneofValue = true
            if case .idRegistryEvent(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._content = .idRegistryEvent(v)
          }
        }()
        case 3: try {
          var v: ContactInfoContent?
          var hadOneofValue = false
          if let current = _storage._content {
            hadOneofValue = true
            if case .contactInfoContent(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._content = .contactInfoContent(v)
          }
        }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._topics) }()
        case 5: try { try decoder.decodeSingularBytesField(value: &_storage._peerID) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._version) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      switch _storage._content {
      case .message?: try {
        guard case .message(let v)? = _storage._content else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }()
      case .idRegistryEvent?: try {
        guard case .idRegistryEvent(let v)? = _storage._content else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .contactInfoContent?: try {
        guard case .contactInfoContent(let v)? = _storage._content else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case nil: break
      }
      if !_storage._topics.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._topics, fieldNumber: 4)
      }
      if !_storage._peerID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._peerID, fieldNumber: 5)
      }
      if _storage._version != .v1 {
        try visitor.visitSingularEnumField(value: _storage._version, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GossipMessage, rhs: GossipMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._content != rhs_storage._content {return false}
        if _storage._topics != rhs_storage._topics {return false}
        if _storage._peerID != rhs_storage._peerID {return false}
        if _storage._version != rhs_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
