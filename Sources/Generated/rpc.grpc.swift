//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `HubServiceClient`, then call methods of this protocol to make API calls.
internal protocol HubServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: HubServiceClientInterceptorFactoryProtocol? { get }

  func submitMessage(
    _ request: Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Message, Message>

  func subscribe(
    _ request: SubscribeRequest,
    callOptions: CallOptions?,
    handler: @escaping (HubEvent) -> Void
  ) -> ServerStreamingCall<SubscribeRequest, HubEvent>

  func getEvent(
    _ request: EventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EventRequest, HubEvent>

  func getCast(
    _ request: CastId,
    callOptions: CallOptions?
  ) -> UnaryCall<CastId, Message>

  func getCastsByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getCastsByParent(
    _ request: CastsByParentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CastsByParentRequest, MessagesResponse>

  func getCastsByMention(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getReaction(
    _ request: ReactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ReactionRequest, Message>

  func getReactionsByFid(
    _ request: ReactionsByFidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ReactionsByFidRequest, MessagesResponse>

  func getReactionsByCast(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ReactionsByTargetRequest, MessagesResponse>

  func getReactionsByTarget(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ReactionsByTargetRequest, MessagesResponse>

  func getUserData(
    _ request: UserDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<UserDataRequest, Message>

  func getUserDataByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getNameRegistryEvent(
    _ request: NameRegistryEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<NameRegistryEventRequest, NameRegistryEvent>

  func getVerification(
    _ request: VerificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<VerificationRequest, Message>

  func getVerificationsByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getSigner(
    _ request: SignerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignerRequest, Message>

  func getSignersByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getIdRegistryEvent(
    _ request: IdRegistryEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<IdRegistryEventRequest, IdRegistryEvent>

  func getIdRegistryEventByAddress(
    _ request: IdRegistryEventByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<IdRegistryEventByAddressRequest, IdRegistryEvent>

  func getFids(
    _ request: FidsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidsRequest, FidsResponse>

  func getLink(
    _ request: LinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<LinkRequest, Message>

  func getLinksByFid(
    _ request: LinksByFidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<LinksByFidRequest, MessagesResponse>

  func getLinksByTarget(
    _ request: LinksByTargetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<LinksByTargetRequest, MessagesResponse>

  func getAllCastMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getAllReactionMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getAllVerificationMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getAllSignerMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getAllUserDataMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getAllLinkMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FidRequest, MessagesResponse>

  func getInfo(
    _ request: HubInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<HubInfoRequest, HubInfoResponse>

  func getSyncStatus(
    _ request: SyncStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SyncStatusRequest, SyncStatusResponse>

  func getAllSyncIdsByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions?
  ) -> UnaryCall<TrieNodePrefix, SyncIds>

  func getAllMessagesBySyncIds(
    _ request: SyncIds,
    callOptions: CallOptions?
  ) -> UnaryCall<SyncIds, MessagesResponse>

  func getSyncMetadataByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions?
  ) -> UnaryCall<TrieNodePrefix, TrieNodeMetadataResponse>

  func getSyncSnapshotByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions?
  ) -> UnaryCall<TrieNodePrefix, TrieNodeSnapshotResponse>
}

extension HubServiceClientProtocol {
  internal var serviceName: String {
    return "HubService"
  }

  /// Submit Methods
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitMessage(
    _ request: Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Message, Message> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.submitMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitMessageInterceptors() ?? []
    )
  }

  /// Event Methods
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribe(
    _ request: SubscribeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (HubEvent) -> Void
  ) -> ServerStreamingCall<SubscribeRequest, HubEvent> {
    return self.makeServerStreamingCall(
      path: HubServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEvent(
    _ request: EventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventRequest, HubEvent> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEventInterceptors() ?? []
    )
  }

  /// Casts
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCast.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCast(
    _ request: CastId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CastId, Message> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getCast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastInterceptors() ?? []
    )
  }

  /// Unary call to GetCastsByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCastsByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCastsByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetCastsByParent
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCastsByParent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCastsByParent(
    _ request: CastsByParentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CastsByParentRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByParent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByParentInterceptors() ?? []
    )
  }

  /// Unary call to GetCastsByMention
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCastsByMention.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCastsByMention(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByMention.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByMentionInterceptors() ?? []
    )
  }

  /// Reactions
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReaction(
    _ request: ReactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ReactionRequest, Message> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionInterceptors() ?? []
    )
  }

  /// Unary call to GetReactionsByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReactionsByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReactionsByFid(
    _ request: ReactionsByFidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ReactionsByFidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByFidInterceptors() ?? []
    )
  }

  /// To be deprecated
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReactionsByCast.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReactionsByCast(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ReactionsByTargetRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByCast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByCastInterceptors() ?? []
    )
  }

  /// Unary call to GetReactionsByTarget
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReactionsByTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReactionsByTarget(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ReactionsByTargetRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByTarget.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByTargetInterceptors() ?? []
    )
  }

  /// User Data
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserData(
    _ request: UserDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<UserDataRequest, Message> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getUserData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserDataInterceptors() ?? []
    )
  }

  /// Unary call to GetUserDataByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserDataByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserDataByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getUserDataByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserDataByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetNameRegistryEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNameRegistryEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNameRegistryEvent(
    _ request: NameRegistryEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<NameRegistryEventRequest, NameRegistryEvent> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getNameRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNameRegistryEventInterceptors() ?? []
    )
  }

  /// Verifications
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVerification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getVerification(
    _ request: VerificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<VerificationRequest, Message> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVerificationInterceptors() ?? []
    )
  }

  /// Unary call to GetVerificationsByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVerificationsByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getVerificationsByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getVerificationsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVerificationsByFidInterceptors() ?? []
    )
  }

  /// Signer
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSigner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSigner(
    _ request: SignerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignerRequest, Message> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getSigner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignerInterceptors() ?? []
    )
  }

  /// Unary call to GetSignersByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSignersByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSignersByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getSignersByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignersByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetIdRegistryEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIdRegistryEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getIdRegistryEvent(
    _ request: IdRegistryEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<IdRegistryEventRequest, IdRegistryEvent> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getIdRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdRegistryEventInterceptors() ?? []
    )
  }

  /// Unary call to GetIdRegistryEventByAddress
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIdRegistryEventByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getIdRegistryEventByAddress(
    _ request: IdRegistryEventByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<IdRegistryEventByAddressRequest, IdRegistryEvent> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getIdRegistryEventByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdRegistryEventByAddressInterceptors() ?? []
    )
  }

  /// Unary call to GetFids
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFids.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFids(
    _ request: FidsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidsRequest, FidsResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getFids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFidsInterceptors() ?? []
    )
  }

  /// Links
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLink(
    _ request: LinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LinkRequest, Message> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinkInterceptors() ?? []
    )
  }

  /// Unary call to GetLinksByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLinksByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLinksByFid(
    _ request: LinksByFidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LinksByFidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getLinksByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinksByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetLinksByTarget
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLinksByTarget.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLinksByTarget(
    _ request: LinksByTargetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LinksByTargetRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getLinksByTarget.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinksByTargetInterceptors() ?? []
    )
  }

  /// Bulk Methods
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllCastMessagesByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllCastMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllCastMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllCastMessagesByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetAllReactionMessagesByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllReactionMessagesByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllReactionMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllReactionMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllReactionMessagesByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetAllVerificationMessagesByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllVerificationMessagesByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllVerificationMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllVerificationMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllVerificationMessagesByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetAllSignerMessagesByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllSignerMessagesByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllSignerMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllSignerMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSignerMessagesByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetAllUserDataMessagesByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllUserDataMessagesByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllUserDataMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllUserDataMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllUserDataMessagesByFidInterceptors() ?? []
    )
  }

  /// Unary call to GetAllLinkMessagesByFid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllLinkMessagesByFid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllLinkMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FidRequest, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllLinkMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllLinkMessagesByFidInterceptors() ?? []
    )
  }

  /// Sync Methods
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getInfo(
    _ request: HubInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HubInfoRequest, HubInfoResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }

  /// Unary call to GetSyncStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSyncStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSyncStatus(
    _ request: SyncStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SyncStatusRequest, SyncStatusResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncStatusInterceptors() ?? []
    )
  }

  /// Unary call to GetAllSyncIdsByPrefix
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllSyncIdsByPrefix.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllSyncIdsByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TrieNodePrefix, SyncIds> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllSyncIdsByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSyncIdsByPrefixInterceptors() ?? []
    )
  }

  /// Unary call to GetAllMessagesBySyncIds
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllMessagesBySyncIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllMessagesBySyncIds(
    _ request: SyncIds,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SyncIds, MessagesResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllMessagesBySyncIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllMessagesBySyncIdsInterceptors() ?? []
    )
  }

  /// Unary call to GetSyncMetadataByPrefix
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSyncMetadataByPrefix.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSyncMetadataByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TrieNodePrefix, TrieNodeMetadataResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncMetadataByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncMetadataByPrefixInterceptors() ?? []
    )
  }

  /// Unary call to GetSyncSnapshotByPrefix
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSyncSnapshotByPrefix.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSyncSnapshotByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TrieNodePrefix, TrieNodeSnapshotResponse> {
    return self.makeUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncSnapshotByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncSnapshotByPrefixInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension HubServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "HubServiceNIOClient")
internal final class HubServiceClient: HubServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: HubServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: HubServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the HubService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: HubServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct HubServiceNIOClient: HubServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: HubServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the HubService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: HubServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol HubServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: HubServiceClientInterceptorFactoryProtocol? { get }

  func makeSubmitMessageCall(
    _ request: Message,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Message, Message>

  func makeSubscribeCall(
    _ request: SubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SubscribeRequest, HubEvent>

  func makeGetEventCall(
    _ request: EventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventRequest, HubEvent>

  func makeGetCastCall(
    _ request: CastId,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CastId, Message>

  func makeGetCastsByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetCastsByParentCall(
    _ request: CastsByParentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CastsByParentRequest, MessagesResponse>

  func makeGetCastsByMentionCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetReactionCall(
    _ request: ReactionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ReactionRequest, Message>

  func makeGetReactionsByFidCall(
    _ request: ReactionsByFidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ReactionsByFidRequest, MessagesResponse>

  func makeGetReactionsByCastCall(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ReactionsByTargetRequest, MessagesResponse>

  func makeGetReactionsByTargetCall(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ReactionsByTargetRequest, MessagesResponse>

  func makeGetUserDataCall(
    _ request: UserDataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<UserDataRequest, Message>

  func makeGetUserDataByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetNameRegistryEventCall(
    _ request: NameRegistryEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<NameRegistryEventRequest, NameRegistryEvent>

  func makeGetVerificationCall(
    _ request: VerificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<VerificationRequest, Message>

  func makeGetVerificationsByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetSignerCall(
    _ request: SignerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SignerRequest, Message>

  func makeGetSignersByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetIDRegistryEventCall(
    _ request: IdRegistryEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<IdRegistryEventRequest, IdRegistryEvent>

  func makeGetIDRegistryEventByAddressCall(
    _ request: IdRegistryEventByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<IdRegistryEventByAddressRequest, IdRegistryEvent>

  func makeGetFidsCall(
    _ request: FidsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidsRequest, FidsResponse>

  func makeGetLinkCall(
    _ request: LinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LinkRequest, Message>

  func makeGetLinksByFidCall(
    _ request: LinksByFidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LinksByFidRequest, MessagesResponse>

  func makeGetLinksByTargetCall(
    _ request: LinksByTargetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LinksByTargetRequest, MessagesResponse>

  func makeGetAllCastMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetAllReactionMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetAllVerificationMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetAllSignerMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetAllUserDataMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetAllLinkMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse>

  func makeGetInfoCall(
    _ request: HubInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<HubInfoRequest, HubInfoResponse>

  func makeGetSyncStatusCall(
    _ request: SyncStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SyncStatusRequest, SyncStatusResponse>

  func makeGetAllSyncIdsByPrefixCall(
    _ request: TrieNodePrefix,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TrieNodePrefix, SyncIds>

  func makeGetAllMessagesBySyncIdsCall(
    _ request: SyncIds,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SyncIds, MessagesResponse>

  func makeGetSyncMetadataByPrefixCall(
    _ request: TrieNodePrefix,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TrieNodePrefix, TrieNodeMetadataResponse>

  func makeGetSyncSnapshotByPrefixCall(
    _ request: TrieNodePrefix,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TrieNodePrefix, TrieNodeSnapshotResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension HubServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return HubServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: HubServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSubmitMessageCall(
    _ request: Message,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Message, Message> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.submitMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitMessageInterceptors() ?? []
    )
  }

  internal func makeSubscribeCall(
    _ request: SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SubscribeRequest, HubEvent> {
    return self.makeAsyncServerStreamingCall(
      path: HubServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  internal func makeGetEventCall(
    _ request: EventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventRequest, HubEvent> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEventInterceptors() ?? []
    )
  }

  internal func makeGetCastCall(
    _ request: CastId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CastId, Message> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastInterceptors() ?? []
    )
  }

  internal func makeGetCastsByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByFidInterceptors() ?? []
    )
  }

  internal func makeGetCastsByParentCall(
    _ request: CastsByParentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CastsByParentRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByParent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByParentInterceptors() ?? []
    )
  }

  internal func makeGetCastsByMentionCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByMention.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByMentionInterceptors() ?? []
    )
  }

  internal func makeGetReactionCall(
    _ request: ReactionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ReactionRequest, Message> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionInterceptors() ?? []
    )
  }

  internal func makeGetReactionsByFidCall(
    _ request: ReactionsByFidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ReactionsByFidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByFidInterceptors() ?? []
    )
  }

  internal func makeGetReactionsByCastCall(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ReactionsByTargetRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByCast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByCastInterceptors() ?? []
    )
  }

  internal func makeGetReactionsByTargetCall(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ReactionsByTargetRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByTarget.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByTargetInterceptors() ?? []
    )
  }

  internal func makeGetUserDataCall(
    _ request: UserDataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<UserDataRequest, Message> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getUserData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserDataInterceptors() ?? []
    )
  }

  internal func makeGetUserDataByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getUserDataByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserDataByFidInterceptors() ?? []
    )
  }

  internal func makeGetNameRegistryEventCall(
    _ request: NameRegistryEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<NameRegistryEventRequest, NameRegistryEvent> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getNameRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNameRegistryEventInterceptors() ?? []
    )
  }

  internal func makeGetVerificationCall(
    _ request: VerificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<VerificationRequest, Message> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVerificationInterceptors() ?? []
    )
  }

  internal func makeGetVerificationsByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getVerificationsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVerificationsByFidInterceptors() ?? []
    )
  }

  internal func makeGetSignerCall(
    _ request: SignerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SignerRequest, Message> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSigner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignerInterceptors() ?? []
    )
  }

  internal func makeGetSignersByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSignersByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignersByFidInterceptors() ?? []
    )
  }

  internal func makeGetIDRegistryEventCall(
    _ request: IdRegistryEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<IdRegistryEventRequest, IdRegistryEvent> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getIdRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdRegistryEventInterceptors() ?? []
    )
  }

  internal func makeGetIDRegistryEventByAddressCall(
    _ request: IdRegistryEventByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<IdRegistryEventByAddressRequest, IdRegistryEvent> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getIdRegistryEventByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdRegistryEventByAddressInterceptors() ?? []
    )
  }

  internal func makeGetFidsCall(
    _ request: FidsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidsRequest, FidsResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getFids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFidsInterceptors() ?? []
    )
  }

  internal func makeGetLinkCall(
    _ request: LinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LinkRequest, Message> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinkInterceptors() ?? []
    )
  }

  internal func makeGetLinksByFidCall(
    _ request: LinksByFidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LinksByFidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getLinksByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinksByFidInterceptors() ?? []
    )
  }

  internal func makeGetLinksByTargetCall(
    _ request: LinksByTargetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LinksByTargetRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getLinksByTarget.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinksByTargetInterceptors() ?? []
    )
  }

  internal func makeGetAllCastMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllCastMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllCastMessagesByFidInterceptors() ?? []
    )
  }

  internal func makeGetAllReactionMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllReactionMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllReactionMessagesByFidInterceptors() ?? []
    )
  }

  internal func makeGetAllVerificationMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllVerificationMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllVerificationMessagesByFidInterceptors() ?? []
    )
  }

  internal func makeGetAllSignerMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllSignerMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSignerMessagesByFidInterceptors() ?? []
    )
  }

  internal func makeGetAllUserDataMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllUserDataMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllUserDataMessagesByFidInterceptors() ?? []
    )
  }

  internal func makeGetAllLinkMessagesByFidCall(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FidRequest, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllLinkMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllLinkMessagesByFidInterceptors() ?? []
    )
  }

  internal func makeGetInfoCall(
    _ request: HubInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<HubInfoRequest, HubInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }

  internal func makeGetSyncStatusCall(
    _ request: SyncStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SyncStatusRequest, SyncStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncStatusInterceptors() ?? []
    )
  }

  internal func makeGetAllSyncIdsByPrefixCall(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TrieNodePrefix, SyncIds> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllSyncIdsByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSyncIdsByPrefixInterceptors() ?? []
    )
  }

  internal func makeGetAllMessagesBySyncIdsCall(
    _ request: SyncIds,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SyncIds, MessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllMessagesBySyncIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllMessagesBySyncIdsInterceptors() ?? []
    )
  }

  internal func makeGetSyncMetadataByPrefixCall(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TrieNodePrefix, TrieNodeMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncMetadataByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncMetadataByPrefixInterceptors() ?? []
    )
  }

  internal func makeGetSyncSnapshotByPrefixCall(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TrieNodePrefix, TrieNodeSnapshotResponse> {
    return self.makeAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncSnapshotByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncSnapshotByPrefixInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension HubServiceAsyncClientProtocol {
  internal func submitMessage(
    _ request: Message,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.submitMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitMessageInterceptors() ?? []
    )
  }

  internal func subscribe(
    _ request: SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<HubEvent> {
    return self.performAsyncServerStreamingCall(
      path: HubServiceClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  internal func getEvent(
    _ request: EventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> HubEvent {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEventInterceptors() ?? []
    )
  }

  internal func getCast(
    _ request: CastId,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastInterceptors() ?? []
    )
  }

  internal func getCastsByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByFidInterceptors() ?? []
    )
  }

  internal func getCastsByParent(
    _ request: CastsByParentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByParent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByParentInterceptors() ?? []
    )
  }

  internal func getCastsByMention(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getCastsByMention.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCastsByMentionInterceptors() ?? []
    )
  }

  internal func getReaction(
    _ request: ReactionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionInterceptors() ?? []
    )
  }

  internal func getReactionsByFid(
    _ request: ReactionsByFidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByFidInterceptors() ?? []
    )
  }

  internal func getReactionsByCast(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByCast.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByCastInterceptors() ?? []
    )
  }

  internal func getReactionsByTarget(
    _ request: ReactionsByTargetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getReactionsByTarget.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReactionsByTargetInterceptors() ?? []
    )
  }

  internal func getUserData(
    _ request: UserDataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getUserData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserDataInterceptors() ?? []
    )
  }

  internal func getUserDataByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getUserDataByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserDataByFidInterceptors() ?? []
    )
  }

  internal func getNameRegistryEvent(
    _ request: NameRegistryEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> NameRegistryEvent {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getNameRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNameRegistryEventInterceptors() ?? []
    )
  }

  internal func getVerification(
    _ request: VerificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVerificationInterceptors() ?? []
    )
  }

  internal func getVerificationsByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getVerificationsByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVerificationsByFidInterceptors() ?? []
    )
  }

  internal func getSigner(
    _ request: SignerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSigner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignerInterceptors() ?? []
    )
  }

  internal func getSignersByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSignersByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSignersByFidInterceptors() ?? []
    )
  }

  internal func getIdRegistryEvent(
    _ request: IdRegistryEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> IdRegistryEvent {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getIdRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdRegistryEventInterceptors() ?? []
    )
  }

  internal func getIdRegistryEventByAddress(
    _ request: IdRegistryEventByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> IdRegistryEvent {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getIdRegistryEventByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdRegistryEventByAddressInterceptors() ?? []
    )
  }

  internal func getFids(
    _ request: FidsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> FidsResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getFids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFidsInterceptors() ?? []
    )
  }

  internal func getLink(
    _ request: LinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getLink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinkInterceptors() ?? []
    )
  }

  internal func getLinksByFid(
    _ request: LinksByFidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getLinksByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinksByFidInterceptors() ?? []
    )
  }

  internal func getLinksByTarget(
    _ request: LinksByTargetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getLinksByTarget.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLinksByTargetInterceptors() ?? []
    )
  }

  internal func getAllCastMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllCastMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllCastMessagesByFidInterceptors() ?? []
    )
  }

  internal func getAllReactionMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllReactionMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllReactionMessagesByFidInterceptors() ?? []
    )
  }

  internal func getAllVerificationMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllVerificationMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllVerificationMessagesByFidInterceptors() ?? []
    )
  }

  internal func getAllSignerMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllSignerMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSignerMessagesByFidInterceptors() ?? []
    )
  }

  internal func getAllUserDataMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllUserDataMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllUserDataMessagesByFidInterceptors() ?? []
    )
  }

  internal func getAllLinkMessagesByFid(
    _ request: FidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllLinkMessagesByFid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllLinkMessagesByFidInterceptors() ?? []
    )
  }

  internal func getInfo(
    _ request: HubInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> HubInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }

  internal func getSyncStatus(
    _ request: SyncStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SyncStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncStatusInterceptors() ?? []
    )
  }

  internal func getAllSyncIdsByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) async throws -> SyncIds {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllSyncIdsByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSyncIdsByPrefixInterceptors() ?? []
    )
  }

  internal func getAllMessagesBySyncIds(
    _ request: SyncIds,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getAllMessagesBySyncIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllMessagesBySyncIdsInterceptors() ?? []
    )
  }

  internal func getSyncMetadataByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) async throws -> TrieNodeMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncMetadataByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncMetadataByPrefixInterceptors() ?? []
    )
  }

  internal func getSyncSnapshotByPrefix(
    _ request: TrieNodePrefix,
    callOptions: CallOptions? = nil
  ) async throws -> TrieNodeSnapshotResponse {
    return try await self.performAsyncUnaryCall(
      path: HubServiceClientMetadata.Methods.getSyncSnapshotByPrefix.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSyncSnapshotByPrefixInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct HubServiceAsyncClient: HubServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: HubServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: HubServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol HubServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'submitMessage'.
  func makeSubmitMessageInterceptors() -> [ClientInterceptor<Message, Message>]

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<SubscribeRequest, HubEvent>]

  /// - Returns: Interceptors to use when invoking 'getEvent'.
  func makeGetEventInterceptors() -> [ClientInterceptor<EventRequest, HubEvent>]

  /// - Returns: Interceptors to use when invoking 'getCast'.
  func makeGetCastInterceptors() -> [ClientInterceptor<CastId, Message>]

  /// - Returns: Interceptors to use when invoking 'getCastsByFid'.
  func makeGetCastsByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getCastsByParent'.
  func makeGetCastsByParentInterceptors() -> [ClientInterceptor<CastsByParentRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getCastsByMention'.
  func makeGetCastsByMentionInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getReaction'.
  func makeGetReactionInterceptors() -> [ClientInterceptor<ReactionRequest, Message>]

  /// - Returns: Interceptors to use when invoking 'getReactionsByFid'.
  func makeGetReactionsByFidInterceptors() -> [ClientInterceptor<ReactionsByFidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getReactionsByCast'.
  func makeGetReactionsByCastInterceptors() -> [ClientInterceptor<ReactionsByTargetRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getReactionsByTarget'.
  func makeGetReactionsByTargetInterceptors() -> [ClientInterceptor<ReactionsByTargetRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getUserData'.
  func makeGetUserDataInterceptors() -> [ClientInterceptor<UserDataRequest, Message>]

  /// - Returns: Interceptors to use when invoking 'getUserDataByFid'.
  func makeGetUserDataByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getNameRegistryEvent'.
  func makeGetNameRegistryEventInterceptors() -> [ClientInterceptor<NameRegistryEventRequest, NameRegistryEvent>]

  /// - Returns: Interceptors to use when invoking 'getVerification'.
  func makeGetVerificationInterceptors() -> [ClientInterceptor<VerificationRequest, Message>]

  /// - Returns: Interceptors to use when invoking 'getVerificationsByFid'.
  func makeGetVerificationsByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getSigner'.
  func makeGetSignerInterceptors() -> [ClientInterceptor<SignerRequest, Message>]

  /// - Returns: Interceptors to use when invoking 'getSignersByFid'.
  func makeGetSignersByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getIdRegistryEvent'.
  func makeGetIdRegistryEventInterceptors() -> [ClientInterceptor<IdRegistryEventRequest, IdRegistryEvent>]

  /// - Returns: Interceptors to use when invoking 'getIdRegistryEventByAddress'.
  func makeGetIdRegistryEventByAddressInterceptors() -> [ClientInterceptor<IdRegistryEventByAddressRequest, IdRegistryEvent>]

  /// - Returns: Interceptors to use when invoking 'getFids'.
  func makeGetFidsInterceptors() -> [ClientInterceptor<FidsRequest, FidsResponse>]

  /// - Returns: Interceptors to use when invoking 'getLink'.
  func makeGetLinkInterceptors() -> [ClientInterceptor<LinkRequest, Message>]

  /// - Returns: Interceptors to use when invoking 'getLinksByFid'.
  func makeGetLinksByFidInterceptors() -> [ClientInterceptor<LinksByFidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getLinksByTarget'.
  func makeGetLinksByTargetInterceptors() -> [ClientInterceptor<LinksByTargetRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllCastMessagesByFid'.
  func makeGetAllCastMessagesByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllReactionMessagesByFid'.
  func makeGetAllReactionMessagesByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllVerificationMessagesByFid'.
  func makeGetAllVerificationMessagesByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllSignerMessagesByFid'.
  func makeGetAllSignerMessagesByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllUserDataMessagesByFid'.
  func makeGetAllUserDataMessagesByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllLinkMessagesByFid'.
  func makeGetAllLinkMessagesByFidInterceptors() -> [ClientInterceptor<FidRequest, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getInfo'.
  func makeGetInfoInterceptors() -> [ClientInterceptor<HubInfoRequest, HubInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getSyncStatus'.
  func makeGetSyncStatusInterceptors() -> [ClientInterceptor<SyncStatusRequest, SyncStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllSyncIdsByPrefix'.
  func makeGetAllSyncIdsByPrefixInterceptors() -> [ClientInterceptor<TrieNodePrefix, SyncIds>]

  /// - Returns: Interceptors to use when invoking 'getAllMessagesBySyncIds'.
  func makeGetAllMessagesBySyncIdsInterceptors() -> [ClientInterceptor<SyncIds, MessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'getSyncMetadataByPrefix'.
  func makeGetSyncMetadataByPrefixInterceptors() -> [ClientInterceptor<TrieNodePrefix, TrieNodeMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'getSyncSnapshotByPrefix'.
  func makeGetSyncSnapshotByPrefixInterceptors() -> [ClientInterceptor<TrieNodePrefix, TrieNodeSnapshotResponse>]
}

internal enum HubServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "HubService",
    fullName: "HubService",
    methods: [
      HubServiceClientMetadata.Methods.submitMessage,
      HubServiceClientMetadata.Methods.subscribe,
      HubServiceClientMetadata.Methods.getEvent,
      HubServiceClientMetadata.Methods.getCast,
      HubServiceClientMetadata.Methods.getCastsByFid,
      HubServiceClientMetadata.Methods.getCastsByParent,
      HubServiceClientMetadata.Methods.getCastsByMention,
      HubServiceClientMetadata.Methods.getReaction,
      HubServiceClientMetadata.Methods.getReactionsByFid,
      HubServiceClientMetadata.Methods.getReactionsByCast,
      HubServiceClientMetadata.Methods.getReactionsByTarget,
      HubServiceClientMetadata.Methods.getUserData,
      HubServiceClientMetadata.Methods.getUserDataByFid,
      HubServiceClientMetadata.Methods.getNameRegistryEvent,
      HubServiceClientMetadata.Methods.getVerification,
      HubServiceClientMetadata.Methods.getVerificationsByFid,
      HubServiceClientMetadata.Methods.getSigner,
      HubServiceClientMetadata.Methods.getSignersByFid,
      HubServiceClientMetadata.Methods.getIdRegistryEvent,
      HubServiceClientMetadata.Methods.getIdRegistryEventByAddress,
      HubServiceClientMetadata.Methods.getFids,
      HubServiceClientMetadata.Methods.getLink,
      HubServiceClientMetadata.Methods.getLinksByFid,
      HubServiceClientMetadata.Methods.getLinksByTarget,
      HubServiceClientMetadata.Methods.getAllCastMessagesByFid,
      HubServiceClientMetadata.Methods.getAllReactionMessagesByFid,
      HubServiceClientMetadata.Methods.getAllVerificationMessagesByFid,
      HubServiceClientMetadata.Methods.getAllSignerMessagesByFid,
      HubServiceClientMetadata.Methods.getAllUserDataMessagesByFid,
      HubServiceClientMetadata.Methods.getAllLinkMessagesByFid,
      HubServiceClientMetadata.Methods.getInfo,
      HubServiceClientMetadata.Methods.getSyncStatus,
      HubServiceClientMetadata.Methods.getAllSyncIdsByPrefix,
      HubServiceClientMetadata.Methods.getAllMessagesBySyncIds,
      HubServiceClientMetadata.Methods.getSyncMetadataByPrefix,
      HubServiceClientMetadata.Methods.getSyncSnapshotByPrefix,
    ]
  )

  internal enum Methods {
    internal static let submitMessage = GRPCMethodDescriptor(
      name: "SubmitMessage",
      path: "/HubService/SubmitMessage",
      type: GRPCCallType.unary
    )

    internal static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/HubService/Subscribe",
      type: GRPCCallType.serverStreaming
    )

    internal static let getEvent = GRPCMethodDescriptor(
      name: "GetEvent",
      path: "/HubService/GetEvent",
      type: GRPCCallType.unary
    )

    internal static let getCast = GRPCMethodDescriptor(
      name: "GetCast",
      path: "/HubService/GetCast",
      type: GRPCCallType.unary
    )

    internal static let getCastsByFid = GRPCMethodDescriptor(
      name: "GetCastsByFid",
      path: "/HubService/GetCastsByFid",
      type: GRPCCallType.unary
    )

    internal static let getCastsByParent = GRPCMethodDescriptor(
      name: "GetCastsByParent",
      path: "/HubService/GetCastsByParent",
      type: GRPCCallType.unary
    )

    internal static let getCastsByMention = GRPCMethodDescriptor(
      name: "GetCastsByMention",
      path: "/HubService/GetCastsByMention",
      type: GRPCCallType.unary
    )

    internal static let getReaction = GRPCMethodDescriptor(
      name: "GetReaction",
      path: "/HubService/GetReaction",
      type: GRPCCallType.unary
    )

    internal static let getReactionsByFid = GRPCMethodDescriptor(
      name: "GetReactionsByFid",
      path: "/HubService/GetReactionsByFid",
      type: GRPCCallType.unary
    )

    internal static let getReactionsByCast = GRPCMethodDescriptor(
      name: "GetReactionsByCast",
      path: "/HubService/GetReactionsByCast",
      type: GRPCCallType.unary
    )

    internal static let getReactionsByTarget = GRPCMethodDescriptor(
      name: "GetReactionsByTarget",
      path: "/HubService/GetReactionsByTarget",
      type: GRPCCallType.unary
    )

    internal static let getUserData = GRPCMethodDescriptor(
      name: "GetUserData",
      path: "/HubService/GetUserData",
      type: GRPCCallType.unary
    )

    internal static let getUserDataByFid = GRPCMethodDescriptor(
      name: "GetUserDataByFid",
      path: "/HubService/GetUserDataByFid",
      type: GRPCCallType.unary
    )

    internal static let getNameRegistryEvent = GRPCMethodDescriptor(
      name: "GetNameRegistryEvent",
      path: "/HubService/GetNameRegistryEvent",
      type: GRPCCallType.unary
    )

    internal static let getVerification = GRPCMethodDescriptor(
      name: "GetVerification",
      path: "/HubService/GetVerification",
      type: GRPCCallType.unary
    )

    internal static let getVerificationsByFid = GRPCMethodDescriptor(
      name: "GetVerificationsByFid",
      path: "/HubService/GetVerificationsByFid",
      type: GRPCCallType.unary
    )

    internal static let getSigner = GRPCMethodDescriptor(
      name: "GetSigner",
      path: "/HubService/GetSigner",
      type: GRPCCallType.unary
    )

    internal static let getSignersByFid = GRPCMethodDescriptor(
      name: "GetSignersByFid",
      path: "/HubService/GetSignersByFid",
      type: GRPCCallType.unary
    )

    internal static let getIdRegistryEvent = GRPCMethodDescriptor(
      name: "GetIdRegistryEvent",
      path: "/HubService/GetIdRegistryEvent",
      type: GRPCCallType.unary
    )

    internal static let getIdRegistryEventByAddress = GRPCMethodDescriptor(
      name: "GetIdRegistryEventByAddress",
      path: "/HubService/GetIdRegistryEventByAddress",
      type: GRPCCallType.unary
    )

    internal static let getFids = GRPCMethodDescriptor(
      name: "GetFids",
      path: "/HubService/GetFids",
      type: GRPCCallType.unary
    )

    internal static let getLink = GRPCMethodDescriptor(
      name: "GetLink",
      path: "/HubService/GetLink",
      type: GRPCCallType.unary
    )

    internal static let getLinksByFid = GRPCMethodDescriptor(
      name: "GetLinksByFid",
      path: "/HubService/GetLinksByFid",
      type: GRPCCallType.unary
    )

    internal static let getLinksByTarget = GRPCMethodDescriptor(
      name: "GetLinksByTarget",
      path: "/HubService/GetLinksByTarget",
      type: GRPCCallType.unary
    )

    internal static let getAllCastMessagesByFid = GRPCMethodDescriptor(
      name: "GetAllCastMessagesByFid",
      path: "/HubService/GetAllCastMessagesByFid",
      type: GRPCCallType.unary
    )

    internal static let getAllReactionMessagesByFid = GRPCMethodDescriptor(
      name: "GetAllReactionMessagesByFid",
      path: "/HubService/GetAllReactionMessagesByFid",
      type: GRPCCallType.unary
    )

    internal static let getAllVerificationMessagesByFid = GRPCMethodDescriptor(
      name: "GetAllVerificationMessagesByFid",
      path: "/HubService/GetAllVerificationMessagesByFid",
      type: GRPCCallType.unary
    )

    internal static let getAllSignerMessagesByFid = GRPCMethodDescriptor(
      name: "GetAllSignerMessagesByFid",
      path: "/HubService/GetAllSignerMessagesByFid",
      type: GRPCCallType.unary
    )

    internal static let getAllUserDataMessagesByFid = GRPCMethodDescriptor(
      name: "GetAllUserDataMessagesByFid",
      path: "/HubService/GetAllUserDataMessagesByFid",
      type: GRPCCallType.unary
    )

    internal static let getAllLinkMessagesByFid = GRPCMethodDescriptor(
      name: "GetAllLinkMessagesByFid",
      path: "/HubService/GetAllLinkMessagesByFid",
      type: GRPCCallType.unary
    )

    internal static let getInfo = GRPCMethodDescriptor(
      name: "GetInfo",
      path: "/HubService/GetInfo",
      type: GRPCCallType.unary
    )

    internal static let getSyncStatus = GRPCMethodDescriptor(
      name: "GetSyncStatus",
      path: "/HubService/GetSyncStatus",
      type: GRPCCallType.unary
    )

    internal static let getAllSyncIdsByPrefix = GRPCMethodDescriptor(
      name: "GetAllSyncIdsByPrefix",
      path: "/HubService/GetAllSyncIdsByPrefix",
      type: GRPCCallType.unary
    )

    internal static let getAllMessagesBySyncIds = GRPCMethodDescriptor(
      name: "GetAllMessagesBySyncIds",
      path: "/HubService/GetAllMessagesBySyncIds",
      type: GRPCCallType.unary
    )

    internal static let getSyncMetadataByPrefix = GRPCMethodDescriptor(
      name: "GetSyncMetadataByPrefix",
      path: "/HubService/GetSyncMetadataByPrefix",
      type: GRPCCallType.unary
    )

    internal static let getSyncSnapshotByPrefix = GRPCMethodDescriptor(
      name: "GetSyncSnapshotByPrefix",
      path: "/HubService/GetSyncSnapshotByPrefix",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `AdminServiceClient`, then call methods of this protocol to make API calls.
internal protocol AdminServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AdminServiceClientInterceptorFactoryProtocol? { get }

  func rebuildSyncTrie(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, Empty>

  func deleteAllMessagesFromDb(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, Empty>

  func submitIdRegistryEvent(
    _ request: IdRegistryEvent,
    callOptions: CallOptions?
  ) -> UnaryCall<IdRegistryEvent, IdRegistryEvent>

  func submitNameRegistryEvent(
    _ request: NameRegistryEvent,
    callOptions: CallOptions?
  ) -> UnaryCall<NameRegistryEvent, NameRegistryEvent>
}

extension AdminServiceClientProtocol {
  internal var serviceName: String {
    return "AdminService"
  }

  /// Unary call to RebuildSyncTrie
  ///
  /// - Parameters:
  ///   - request: Request to send to RebuildSyncTrie.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rebuildSyncTrie(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, Empty> {
    return self.makeUnaryCall(
      path: AdminServiceClientMetadata.Methods.rebuildSyncTrie.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRebuildSyncTrieInterceptors() ?? []
    )
  }

  /// Unary call to DeleteAllMessagesFromDb
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAllMessagesFromDb.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAllMessagesFromDb(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, Empty> {
    return self.makeUnaryCall(
      path: AdminServiceClientMetadata.Methods.deleteAllMessagesFromDb.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllMessagesFromDbInterceptors() ?? []
    )
  }

  /// Unary call to SubmitIdRegistryEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitIdRegistryEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitIdRegistryEvent(
    _ request: IdRegistryEvent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<IdRegistryEvent, IdRegistryEvent> {
    return self.makeUnaryCall(
      path: AdminServiceClientMetadata.Methods.submitIdRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitIdRegistryEventInterceptors() ?? []
    )
  }

  /// Unary call to SubmitNameRegistryEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitNameRegistryEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitNameRegistryEvent(
    _ request: NameRegistryEvent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<NameRegistryEvent, NameRegistryEvent> {
    return self.makeUnaryCall(
      path: AdminServiceClientMetadata.Methods.submitNameRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitNameRegistryEventInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension AdminServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "AdminServiceNIOClient")
internal final class AdminServiceClient: AdminServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: AdminServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: AdminServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the AdminService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AdminServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct AdminServiceNIOClient: AdminServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AdminServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the AdminService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AdminServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol AdminServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: AdminServiceClientInterceptorFactoryProtocol? { get }

  func makeRebuildSyncTrieCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, Empty>

  func makeDeleteAllMessagesFromDbCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, Empty>

  func makeSubmitIDRegistryEventCall(
    _ request: IdRegistryEvent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<IdRegistryEvent, IdRegistryEvent>

  func makeSubmitNameRegistryEventCall(
    _ request: NameRegistryEvent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<NameRegistryEvent, NameRegistryEvent>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AdminServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return AdminServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: AdminServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRebuildSyncTrieCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, Empty> {
    return self.makeAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.rebuildSyncTrie.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRebuildSyncTrieInterceptors() ?? []
    )
  }

  internal func makeDeleteAllMessagesFromDbCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, Empty> {
    return self.makeAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.deleteAllMessagesFromDb.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllMessagesFromDbInterceptors() ?? []
    )
  }

  internal func makeSubmitIDRegistryEventCall(
    _ request: IdRegistryEvent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<IdRegistryEvent, IdRegistryEvent> {
    return self.makeAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.submitIdRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitIdRegistryEventInterceptors() ?? []
    )
  }

  internal func makeSubmitNameRegistryEventCall(
    _ request: NameRegistryEvent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<NameRegistryEvent, NameRegistryEvent> {
    return self.makeAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.submitNameRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitNameRegistryEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AdminServiceAsyncClientProtocol {
  internal func rebuildSyncTrie(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Empty {
    return try await self.performAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.rebuildSyncTrie.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRebuildSyncTrieInterceptors() ?? []
    )
  }

  internal func deleteAllMessagesFromDb(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Empty {
    return try await self.performAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.deleteAllMessagesFromDb.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllMessagesFromDbInterceptors() ?? []
    )
  }

  internal func submitIdRegistryEvent(
    _ request: IdRegistryEvent,
    callOptions: CallOptions? = nil
  ) async throws -> IdRegistryEvent {
    return try await self.performAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.submitIdRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitIdRegistryEventInterceptors() ?? []
    )
  }

  internal func submitNameRegistryEvent(
    _ request: NameRegistryEvent,
    callOptions: CallOptions? = nil
  ) async throws -> NameRegistryEvent {
    return try await self.performAsyncUnaryCall(
      path: AdminServiceClientMetadata.Methods.submitNameRegistryEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitNameRegistryEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct AdminServiceAsyncClient: AdminServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AdminServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AdminServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol AdminServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'rebuildSyncTrie'.
  func makeRebuildSyncTrieInterceptors() -> [ClientInterceptor<Empty, Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteAllMessagesFromDb'.
  func makeDeleteAllMessagesFromDbInterceptors() -> [ClientInterceptor<Empty, Empty>]

  /// - Returns: Interceptors to use when invoking 'submitIdRegistryEvent'.
  func makeSubmitIdRegistryEventInterceptors() -> [ClientInterceptor<IdRegistryEvent, IdRegistryEvent>]

  /// - Returns: Interceptors to use when invoking 'submitNameRegistryEvent'.
  func makeSubmitNameRegistryEventInterceptors() -> [ClientInterceptor<NameRegistryEvent, NameRegistryEvent>]
}

internal enum AdminServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AdminService",
    fullName: "AdminService",
    methods: [
      AdminServiceClientMetadata.Methods.rebuildSyncTrie,
      AdminServiceClientMetadata.Methods.deleteAllMessagesFromDb,
      AdminServiceClientMetadata.Methods.submitIdRegistryEvent,
      AdminServiceClientMetadata.Methods.submitNameRegistryEvent,
    ]
  )

  internal enum Methods {
    internal static let rebuildSyncTrie = GRPCMethodDescriptor(
      name: "RebuildSyncTrie",
      path: "/AdminService/RebuildSyncTrie",
      type: GRPCCallType.unary
    )

    internal static let deleteAllMessagesFromDb = GRPCMethodDescriptor(
      name: "DeleteAllMessagesFromDb",
      path: "/AdminService/DeleteAllMessagesFromDb",
      type: GRPCCallType.unary
    )

    internal static let submitIdRegistryEvent = GRPCMethodDescriptor(
      name: "SubmitIdRegistryEvent",
      path: "/AdminService/SubmitIdRegistryEvent",
      type: GRPCCallType.unary
    )

    internal static let submitNameRegistryEvent = GRPCMethodDescriptor(
      name: "SubmitNameRegistryEvent",
      path: "/AdminService/SubmitNameRegistryEvent",
      type: GRPCCallType.unary
    )
  }
}

