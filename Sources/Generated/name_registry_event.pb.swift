// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: name_registry_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum NameRegistryEventType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case transfer // = 1
  case renew // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .transfer
    case 2: self = .renew
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .transfer: return 1
    case .renew: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension NameRegistryEventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [NameRegistryEventType] = [
    .none,
    .transfer,
    .renew,
  ]
}

#endif  // swift(>=4.2)

struct NameRegistryEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockNumber: UInt32 = 0

  var blockHash: Data = Data()

  var transactionHash: Data = Data()

  var logIndex: UInt32 = 0

  var fname: Data = Data()

  var from: Data = Data()

  var to: Data = Data()

  var type: NameRegistryEventType = .none

  var expiry: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension NameRegistryEventType: @unchecked Sendable {}
extension NameRegistryEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NameRegistryEventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NAME_REGISTRY_EVENT_TYPE_NONE"),
    1: .same(proto: "NAME_REGISTRY_EVENT_TYPE_TRANSFER"),
    2: .same(proto: "NAME_REGISTRY_EVENT_TYPE_RENEW"),
  ]
}

extension NameRegistryEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NameRegistryEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_number"),
    2: .standard(proto: "block_hash"),
    3: .standard(proto: "transaction_hash"),
    4: .standard(proto: "log_index"),
    5: .same(proto: "fname"),
    6: .same(proto: "from"),
    7: .same(proto: "to"),
    8: .same(proto: "type"),
    9: .same(proto: "expiry"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.blockNumber) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.blockHash) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.transactionHash) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.logIndex) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.fname) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.to) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.expiry) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.blockNumber, fieldNumber: 1)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockHash, fieldNumber: 2)
    }
    if !self.transactionHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.transactionHash, fieldNumber: 3)
    }
    if self.logIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.logIndex, fieldNumber: 4)
    }
    if !self.fname.isEmpty {
      try visitor.visitSingularBytesField(value: self.fname, fieldNumber: 5)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 6)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularBytesField(value: self.to, fieldNumber: 7)
    }
    if self.type != .none {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 8)
    }
    if self.expiry != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiry, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NameRegistryEvent, rhs: NameRegistryEvent) -> Bool {
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.transactionHash != rhs.transactionHash {return false}
    if lhs.logIndex != rhs.logIndex {return false}
    if lhs.fname != rhs.fname {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.type != rhs.type {return false}
    if lhs.expiry != rhs.expiry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
